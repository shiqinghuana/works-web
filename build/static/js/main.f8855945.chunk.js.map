{"version":3,"sources":["reportWebVitals.js","utils/request.js","api/company.js","component/company/CompanyList.js","component/company/CompanyDescriptions.js","component/treemap/TreeMap.js","component/hashmap/HashMap.js","component/company/CompanyDetail.js","layout/BasicLayout.js","static/images/2d33195cb865e7759fd71fe081c297f3.jpeg","component/treemap/RedBlackTree.js","static/images/1621575534283490.png","component/Wellcom.js","static/icon/Icon.js","config/router.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","errCallBack","e","code","msg","post","url","body","init","method","headers","JSON","stringify","console","log","request","Request","fetch","res","json","catch","call","upload","formData","FormData","append","companyQueryAll","companyQuery","columns","dataIndex","valueType","width","title","copyable","tooltip","search","initialValue","filters","onFilter","a","label","value","key","sorter","render","_","b","to","id","initData","data","length","i","CompanyList","props","getData","state","promise","api","setState","tableColumns","map","item","ellipsis","type","config","table","React","createRef","style","height","bordered","actionRef","this","pagination","pageSize","total","rowSelection","span","dataSource","params","sorsort","filter","toolBarRender","Component","number","layout","labelStyle","fontSize","contentStyle","column","CompanyDescriptions","loading","desc","companyId","match","split","message","error","window","location","pathname","borderRight","datasource","companyBackInfos","Item","valueEnum","0","rowKey","htmlType","RED","BLACK","Entry","parent","color","oldValue","Treemap","root","next","comparator","fixAfterInsertion","x","parentOf","leftOf","y","rightOf","colorOf","setColor","rotateLeft","rotateRight","put","cmp","t","size","cpr","compare","left","setValue","right","Error","k","get","p","r","l","c","sequence","treeHeight","offSet","Math","pow","leftArrowOffSet","rightArrowOffSet","prent","result","sequences","X","Y","push","copy","deleteEntry","s","successor","replacement","fixAfterDeletion","sib","ch","remove","getEntry","MAXIMUM_CAPACITY","DEFAULT_LOAD_FACTOR","Node","hash","h","HashMap","loadFactor","modCount","tab","treemap","midEach","concat","newTab","onlyIfAbsent","array","entry","n","resize","newNode","equals","constructor","binCount","TREEIFY_THRESHOLD","treeifyBin","threshold","getNode","first","putVal","evict","newCap","oldTab","oldCap","oldThr","newThr","ft","Array","j","loHead","loTail","hiHead","hiTail","hashMap","scrollToFirstError","validateMessages","required","formItemProps","rules","CompanyDetail","fileList","upLoadDisable","form","editKey","xid","current","setFieldsValue","ref","onFinish","values","undefined","company","success","warning","name","hidden","Group","options","wrapperCol","offset","TextArea","allowClear","autoSize","minRows","maxRows","showCount","maxLength","placeholder","beforeUpload","disabled","onChange","it","file","warn","rsp","onRemove","originFileObj","multiple","trigger","minLength","recordCreatorProps","newRecordType","record","Date","now","editable","actionRender","row","defaultDoms","delete","editableKeys","onClick","BasicLayout","logo","route","routes","menuItemRender","dom","path","href","icon","PageContainer","content","renderRoutes","Circles","text","abs","s1","substring","Fragment","radius","fill","ArrowsRight","x2","y2","x3","y3","x1","y1","char","sqrt","points","strokeWidth","lineCap","pointerLength","pointerWidth","stroke","ArrowsLeft","RedBlack","treeMap","doms","node","px","max","min","insert","onPressEnter","find","border","draggable","Welcome","src","createFromIconfontCN","scriptUrl","exact","component","ShareAltOutlined","RedBlackTree","RadarChartOutlined","LinkOutlined","FormOutlined","SendOutlined","SolutionOutlined","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f8855945.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\n\r\n\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst Accept = \"application/json, text/javascript, */*;\";\r\n/**\r\n * 几种header， 默认  application/x-www-form-urlencoded; charset=utf-8编码\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nconst DefaultContentType = \"application/x-www-form-urlencoded; charset=utf-8\";\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst FileContentType = \"multipart/form-data\";\r\n\r\nconst JsonType = \"application/json\";\r\n\r\nconst errCallBack = (e) => {\r\n    // 非业务问题固定返回格式\r\n    return {\r\n        code:99,\r\n        msg:e\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line no-use-before-define\r\nexport const get = (url,errCallBack =errCallBack):Promise=>{\r\n    let init = {\r\n        method: 'get'\r\n    }\r\n    let request = new Request(url, init);\r\n    return fetch(request)\r\n        .then((res) => {\r\n            return  res.json()\r\n        })\r\n        .catch(\r\n            e => errCallBack.call(e)\r\n        )\r\n}\r\n\r\n\r\nexport const post = (url,body):Promise=> {\r\n    let init = {\r\n        method: 'post',\r\n        headers: {'Content-Type': JsonType},\r\n        body: JSON.stringify(body)\r\n    }\r\n    console.log(\"请求参数\",body)\r\n    let request = new Request(url, init);\r\n    return fetch(request)\r\n        .then((res) => {\r\n            return res.json()\r\n        })\r\n        .catch(\r\n            e => errCallBack.call(e)\r\n        )\r\n\r\n}\r\n\r\nexport const upload = (url,body)=>{\r\n    debugger\r\n    let formData = new FormData();\r\n    formData.append(\"file\",body)\r\n    let init = {\r\n        method: 'post',\r\n        body: formData\r\n    }\r\n    const request = new Request(url,init);\r\n    return fetch(request).then((res) => {\r\n        return res.json()\r\n    }).catch(\r\n            e => errCallBack.call(e)\r\n        )\r\n\r\n\r\n\r\n}\r\n\r\n//\r\n// export default class MyRequest extends React.Component{\r\n//     url;\r\n//     method;\r\n//     type;\r\n//     body;\r\n//     response;\r\n//     getRequest = () => {\r\n//         let init = {\r\n//             method: 'get'\r\n//         }\r\n//         return new Request(this.url, init)\r\n//     }\r\n//\r\n//\r\n//     postRequest = () => {\r\n//         let init = {\r\n//             method: 'post',\r\n//             headers: {'Content-Type':JsonType},\r\n//             body: JSON.stringify(this.body)\r\n//         }\r\n//         return new Request(this.url, init)\r\n//     }\r\n//\r\n//     fileRequest = (body) => {\r\n//         const formData = new FormData();\r\n//         formData.append('fileName', {...body})\r\n//         this.body = formData;\r\n//         let init = {\r\n//             method: 'post',\r\n//             header: FileContentType, //这里可能要去掉\r\n//             body: this.body\r\n//         }\r\n//         return new Request(this.url, init)\r\n//     }\r\n//\r\n//\r\n//     get(url) {\r\n//         this.url =url\r\n//         return fetch(this.getRequest())\r\n//             .then((res) => {\r\n//                 return  res.json()\r\n//             })\r\n//             .then(e => {return  e})\r\n//             .catch(\r\n//                 e => {\r\n//                     // 非业务问题固定返回格式\r\n//                     return {\r\n//                         code:99,\r\n//                         msg:e.stack\r\n//                     };\r\n//                 }\r\n//             )\r\n//     }\r\n//\r\n//\r\n//     post(url, body){\r\n//         this.url = url;\r\n//         this.body = body;\r\n//         return fetch(this.postRequest())\r\n//             .then((res) => {\r\n//                 return  res.json()\r\n//             })\r\n//             .then(e => {return  e})\r\n//             .catch(\r\n//                 e => {\r\n//                     // 非业务问题固定返回格式\r\n//                     return {\r\n//                         code:99,\r\n//                         msg:e.stack\r\n//                     };\r\n//                 }\r\n//             )\r\n//\r\n//     }\r\n//\r\n// }\r\n//\r\n","import {post,upload}  from \"../utils/request\";\r\n\r\n\r\n\r\n\r\nexport let companyChange =(body)=>  post(\"/works/company/change\",body);\r\n\r\nexport let companyQueryAll = (body) => post(\"/works/company/queryAll\",body)\r\n\r\n\r\nexport let companyQuery = (body) => post(\"/works/company/query\",body)\r\n\r\nexport let uploadFile = (body) => upload(\"/fileSupport/upload\",body)\r\n\r\nexport let deleteFile = (body) => upload(\"/fileSupport/delete\",body)","import * as api from \"../../api/company\";\r\n\r\nimport ProTable from '@ant-design/pro-table';\r\nimport React from \"react\";\r\nimport {Button} from 'antd';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nconst columns = [\r\n    {\r\n        dataIndex: 'index',\r\n        valueType: 'indexBorder',\r\n        width: 48,\r\n    },\r\n    {\r\n        title: '公司名称',\r\n        dataIndex: 'companyName',\r\n        copyable: true,\r\n        tooltip: \"必填\"\r\n\r\n    },\r\n    {\r\n        title: '公司地址',\r\n        search: false,\r\n        dataIndex: 'companyAddr',\r\n\r\n    },\r\n    {\r\n        title: \"公司类型\",\r\n        dataIndex: 'type',\r\n        valueType: 'select',\r\n        initialValue: \"3\",\r\n        filters: true,\r\n        onFilter: true,\r\n        request: async () => [\r\n            {label: \"内部\", value: \"0\"},\r\n            {label: \"外部\", value: \"1\"},\r\n            {label: \"全部\", value: \"3\"}\r\n        ],\r\n\r\n    },\r\n    {\r\n        title: '操作',\r\n        key: 'action',\r\n        sorter: true,\r\n        valueType: 'option',\r\n        render: (_, b, ...item) => {\r\n            return (<Link to={\"/ts/companyDescriptions/companyId=\" + b.id}> 查看</Link>)\r\n        },\r\n    },\r\n\r\n];\r\n\r\nconst initData = (data) => {\r\n    if (data.length < 1) {\r\n        return [];\r\n    }\r\n    for (let i = 0; i < data.length; i++) {\r\n\r\n        data[i].key = i + 1;\r\n    }\r\n    return data;\r\n};\r\n\r\nlet CompanyList = class Company extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            type: \"3\",\r\n            config: {},\r\n        }\r\n        this.table = React.createRef();\r\n\r\n    }\r\n\r\n\r\n    getData = (body = this.state) => {\r\n\r\n        let promise = api.companyQueryAll(body);\r\n        promise.then((e) => {\r\n                if (e.code === 0) {\r\n                    this.setState({data: initData(e.data)})\r\n\r\n                }\r\n            }\r\n        )\r\n    }\r\n    tableColumns = columns.map((item: any) => ({\r\n        ...item,\r\n        ellipsis: true,\r\n    }));\r\n\r\n    render() {\r\n        return (\r\n            <ProTable\r\n                style={{height:'95vh'}}\r\n                bordered\r\n                actionRef={this.table}\r\n                pagination={{pageSize: 5, total: 100}}\r\n                {...this.state.config}\r\n                rowSelection={{}}\r\n                // tableAlertRender={(a) =>{\r\n                //     return <div>\r\n                //         已选择{a.selectedRows.length}项\r\n                //         <Button onClick={this.table.current.reload}>全部删除</Button>\r\n                //     </div>\r\n                // }}\r\n                columns={this.tableColumns}\r\n                search={{span: 3}}\r\n                dataSource={this.state.data}\r\n                request={(params, sorsort, filter) => {\r\n                    this.getData(params)\r\n                }\r\n                }\r\n                toolBarRender={() =>\r\n                    <Link to={\"/ts/companyDetail\"}>\r\n                        <Button type={\"primary\"} key={\"new\"}>\r\n                            新建公司\r\n                        </Button>\r\n                    </Link>\r\n\r\n\r\n                }\r\n\r\n            />\r\n        );\r\n    }\r\n\r\n\r\n};\r\nexport default CompanyList;","import ProDescriptions from '@ant-design/pro-descriptions'\r\nimport React from \"react\";\r\nimport {number} from \"prop-types\";\r\nimport {companyQuery} from \"../../api/company\";\r\nimport {message} from \"antd\";\r\nimport ProTable from '@ant-design/pro-table';\r\nimport {Button} from \"antd\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {Space} from \"antd\";\r\n\r\nconst columns = [\r\n    {\r\n        dataIndex: 'index',\r\n        valueType: 'indexBorder',\r\n        width: 48,\r\n    },\r\n    {\r\n        title: \"银行名称\",\r\n        dataIndex: \"backName\",\r\n    },\r\n    {\r\n        title: \"支行名称\",\r\n        dataIndex: \"branchBackName\",\r\n    },\r\n    {\r\n        title: \"收款户名\",\r\n        dataIndex: \"cardName\",\r\n        valueType: \"progress\",\r\n    },\r\n    {\r\n        title: \"账号\",\r\n        dataIndex: \"cardId\",\r\n    },\r\n    {\r\n        title: \"备注\",\r\n        dataIndex: \"mark\",\r\n    },\r\n\r\n\r\n]\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nconst Company = {\r\n    id: number,\r\n    companyName: String,\r\n    companyAddr: String,\r\n    companyPhone: String,\r\n    mark: String,\r\n    type: String,\r\n    updataTime: String,\r\n    insertTime: String,\r\n    delete: number,\r\n}\r\n\r\n\r\nconst config = {\r\n    layout: \"horizontal\", // 布局，水平垂直\r\n    labelStyle: {fontSize: 20, width: \"10em\"}, // label 框的属性\r\n    contentStyle: {fontSize: 20}, // 内容框属性\r\n    column: 1,// 一行展示几个框\r\n}\r\nexport default class CompanyDescriptions extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            config: config,\r\n            loading: false,\r\n        }\r\n        this.desc = React.createRef();\r\n\r\n        console.log(\"props\",props)\r\n        let e;\r\n        this.companyId = (e=this.props.match.params.companyId)&& e.split(\"=\")[1]\r\n        if (!this.companyId) {\r\n            message.error(\"companyId 为空，随机给一个\")\r\n            window.location.pathname = \"/ts/companyDescriptions/companyId=44\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div style={{width: '50%',height:\"95vh\", borderRight: \"solid 1px\"}}>\r\n                <ProDescriptions\r\n                    loading={this.state.loading}\r\n                    actionRef={this.desc}\r\n                    request={() => {\r\n                        this.setState({loading: true})\r\n                        companyQuery({id: this.companyId}).then(\r\n                            (res) => {\r\n                                if (res.code === 0) {\r\n                                    console.log(res.data)\r\n                                    this.setState({\r\n                                        res: res.data,\r\n                                        loading: false,\r\n                                        datasource: res.data.companyBackInfos\r\n                                    })\r\n                                }\r\n                            }\r\n                        )\r\n                    }}\r\n                    dataSource={this.state.res}\r\n\r\n\r\n                    {...this.state.config}\r\n\r\n                >\r\n                    <ProDescriptions.Item dataIndex={['company', 'companyName']} label={\"公司名称\"}/>\r\n                    <ProDescriptions.Item dataIndex={['company', 'companyAddr']} label={\"公司地址\"}/>\r\n                    <ProDescriptions.Item dataIndex={['company', 'companyPhone']} label={\"公司电话\"}/>\r\n                    <ProDescriptions.Item dataIndex={['company', 'mark']} label={\"公司备注信息\"}/>\r\n                    <ProDescriptions.Item valueType={\"select\"} dataIndex={['company', 'type']} valueEnum={{\r\n                        0: \"内部公司\"\r\n                    }} label={\"公司类型\"}/>\r\n\r\n                    <ProDescriptions.Item valueType={\"dateTime\"} dataIndex={['company', 'updataTime']} label={\"更新时间\"}/>\r\n\r\n                </ProDescriptions>\r\n                <br/>\r\n                <p>银行卡信息</p>\r\n                <ProTable\r\n                    rowKey={\"id\"}\r\n                    bordered\r\n                    columns={columns}\r\n                    search={false}\r\n                    toolBarRender={false}\r\n                    dataSource={this.state.datasource}\r\n                >\r\n\r\n                </ProTable>\r\n                <br/>\r\n                <br/>\r\n                <Space>\r\n                    <Link to={\"/ts/companyList\"}>\r\n                        <Button type={\"primary\"} > 返回列表</Button>\r\n                    </Link>\r\n\r\n                   <Link to={\"/ts/companyDetail/companyId=\" +  this.companyId}>\r\n                       <Button type={\"button\"} htmlType={\"change\"}> 修改</Button>\r\n                   </Link>\r\n                </Space>\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n\r\n\r\n}","const RED = false;\r\nconst BLACK = true;\r\n\r\n// 数据结构\r\nclass Entry {\r\n    key;\r\n    value;\r\n    left;\r\n    right;\r\n    parent;\r\n    color = BLACK;\r\n\r\n    /**\r\n     * Make a new cell with given key, value, and parent, and with\r\n     * {@code null} child links, and BLACK color.\r\n     */\r\n    constructor(key, value, parent) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.parent = parent;\r\n    }\r\n\r\n    /**\r\n     * Returns the key.\r\n     *\r\n     * @return the key\r\n     */\r\n    getKey() {\r\n        return this.key;\r\n    }\r\n\r\n\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n\r\n\r\n    setValue(value) {\r\n        let oldValue = this.value;\r\n        this.value = value;\r\n        return oldValue;\r\n    }\r\n\r\n\r\n}\r\n\r\n// 红黑树的实现类\r\nexport default class Treemap {\r\n    constructor(root =null,next =null,comparator = null) {\r\n        this.comparator = comparator;\r\n        this.root = root; // 初始化值\r\n        this.size = 0; // 这个size用于记录节点值。用于渲染画布大小\r\n        this.next = next;\r\n    }\r\n\r\n    // 插入后平衡\r\n    fixAfterInsertion = (x) => {\r\n        x.color = RED;\r\n        // 如果 爸爸是红色且自己不是根节点则开始平衡\r\n        while (x != null && x !== this.root && x.parent.color === RED) {\r\n            if (this.parentOf(x) === this.leftOf(this.parentOf(this.parentOf(x)))) {\r\n                // 如果爸爸 是 爷爷的左孩子\r\n                // 拿到右孩子的节点 ---叔叔\r\n                let y = this.rightOf(this.parentOf(this.parentOf(x)));\r\n\r\n                // 如果叔叔是红色的，说明爷爷是黑色的，交换颜色\r\n                if (this.colorOf(y) === RED) {\r\n                    this.setColor(this.parentOf(x), BLACK);\r\n                    this.setColor(y, BLACK);\r\n                    this.setColor(this.parentOf(this.parentOf(x)), RED);\r\n                    x = this.parentOf(this.parentOf(x));\r\n                } else {// 如果叔叔是黑色的\r\n                    //如果自己是右孩子\r\n                    if (x === this.rightOf(this.parentOf(x))) {\r\n                        // 对爸爸进行左旋一次\r\n                        x = this.parentOf(x);\r\n                        this.rotateLeft(x);\r\n                    }\r\n\r\n                    this.setColor(this.parentOf(x), BLACK);\r\n                    this.setColor(this.parentOf(this.parentOf(x)), RED);\r\n                    // 对爷爷进行一次右旋\r\n                    this.rotateRight(this.parentOf(this.parentOf(x)));\r\n                }\r\n            } else {\r\n                // 爸爸是爷爷的右孩子，拿到左侧的叔叔节点\r\n                let y = this.leftOf(this.parentOf(this.parentOf(x)));\r\n                // 如果叔叔是红色的，啥都不用做，交换爸爸，叔叔，爷爷的颜色\r\n                if (this.colorOf(y) === RED) {\r\n                    this.setColor(this.parentOf(x), BLACK);\r\n                    this.setColor(y, BLACK);\r\n                    this.setColor(this.parentOf(this.parentOf(x)), RED);\r\n                    x = this.parentOf(this.parentOf(x));\r\n                } else {\r\n                    // 如果叔叔是黑的的\r\n                    // 如果自己是爸爸的左界定啊\r\n                    if (x === this.leftOf(this.parentOf(x))) {\r\n                        x = this.parentOf(x);\r\n                        // 对爸爸进行一次右旋\r\n                        this.rotateRight(x);\r\n                    }\r\n                    this.setColor(this.parentOf(x), BLACK);\r\n                    this.setColor(this.parentOf(this.parentOf(x)), RED);\r\n                    // 对爷爷进行一次左旋\r\n                    this.rotateLeft(this.parentOf(this.parentOf(x)));\r\n                }\r\n            }\r\n        }\r\n        this.root.color = BLACK;\r\n    }\r\n\r\n    put = (key, value) => {\r\n        let t = this.root;\r\n        if (t === null) {\r\n            this.root = new Entry(key, value, null);\r\n            this.size = 1;\r\n            return null;\r\n        }\r\n        let cmp;\r\n        let parent;\r\n        // split comparator and comparable paths\r\n        let cpr = this.comparator;\r\n        if (cpr != null) {\r\n            do {\r\n                parent = t;\r\n                cmp = cpr.compare(key, t.key);\r\n                if (cmp < 0)\r\n                    t = t.left;\r\n                else if (cmp > 0)\r\n                    t = t.right;\r\n                else\r\n                    return t.setValue(value);\r\n            } while (t != null);\r\n        } else {\r\n            if (key == null)\r\n                throw new Error();\r\n            let k = key;\r\n            do {\r\n                parent = t;\r\n                // 这里做比较，只支持int类型\r\n                cmp = k - (t.key);\r\n                if (cmp < 0)\r\n                    t = t.left;\r\n                else if (cmp > 0)\r\n                    t = t.right;\r\n                else\r\n                    return t.setValue(value);\r\n            } while (t != null);\r\n        }\r\n        let e = new Entry(key, value, parent);\r\n        if (cmp < 0)\r\n            parent.left = e;\r\n        else\r\n            parent.right = e;\r\n        this.fixAfterInsertion(e);\r\n        this.size++;\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    get = (key, k = this.root) => {\r\n        debugger\r\n        if (!k) {\r\n            return false;\r\n        }\r\n        if (k.key === key) {\r\n            return true;\r\n        }\r\n        if (k.key - key>0) {\r\n            return this.get(key, k.left || false)\r\n        }\r\n        return this.get(key, k.right || false)\r\n    }\r\n\r\n    rotateLeft = (p) => {\r\n        if (p != null) {\r\n            let r = p.right;\r\n            p.right = r.left;\r\n            if (r.left != null)\r\n                r.left.parent = p;\r\n            r.parent = p.parent;\r\n            if (p.parent == null)\r\n                this.root = r;\r\n            else if (p.parent.left === p)\r\n                p.parent.left = r;\r\n            else\r\n                p.parent.right = r;\r\n            r.left = p;\r\n            p.parent = r;\r\n        }\r\n    }\r\n\r\n    rotateRight = (p) => {\r\n        if (p !== null) {\r\n            let l = p.left;\r\n            p.left = l.right;\r\n            if (l.right != null) l.right.parent = p;\r\n            l.parent = p.parent;\r\n            if (p.parent == null)\r\n                this.root = l;\r\n            else if (p.parent.right === p)\r\n                p.parent.right = l;\r\n            else p.parent.left = l;\r\n            l.right = p;\r\n            p.parent = l;\r\n        }\r\n    }\r\n\r\n    colorOf = (p) => {\r\n        return (p == null ? BLACK : p.color);\r\n    }\r\n\r\n    parentOf = (p) => {\r\n        return (p == null ? null : p.parent);\r\n    }\r\n\r\n    setColor = (p, c) => {\r\n        if (p != null)\r\n            p.color = c;\r\n    }\r\n\r\n    leftOf = (p) => {\r\n        return (p == null) ? null : p.left;\r\n    }\r\n\r\n    rightOf = (p) => {\r\n        return (p == null) ? null : p.right;\r\n    }\r\n\r\n\r\n    /**\r\n     * 二叉树的层序遍历，这里要确定好每个节点的 row col 坐标\r\n     * 以及确定 leftArrow rightArrow 是否要 渲染\r\n     * 默认更节点行列坐标 [0,0]\r\n     * @param treeHeight 树最高层数\r\n     * 公式。以root为节点\r\n     * root 列坐标 为 2^(treeHeight-1) 这里要不要-1 看效果，如果以0开头，就减1\r\n     * 子节点坐标以父节点为参考\r\n     * 左节点 prentCol - 2^(treeHeight-row)\r\n     *  右节点 prentCol + 2^(treeHeight-row)\r\n     *\r\n     * @returns {[]}\r\n     */\r\n    sequence = (treeHeight) => {\r\n        if (this.root === null) {\r\n            return\r\n        }\r\n        this.root.offSet = [1, Math.pow(2, treeHeight - 1)]\r\n        // 重置，解决删除的时候会保留箭头的bug\r\n        this.root.leftArrowOffSet = null\r\n        this.root.rightArrowOffSet = null\r\n        let result = []; // 返回结果集合 fix bug\r\n        let sequences = [this.root]; // 每一层的集合\r\n        let e = [], left, right, prent;\r\n\r\n        while (sequences.length > 0 || e.length > 0) {\r\n            for (let i = 0; i < sequences.length; i++) {\r\n\r\n                prent = sequences[i]\r\n                let [X, Y] = prent.offSet\r\n                if ((left = prent.left)) {\r\n                    left.offSet = [X + 1, Y - Math.pow(2, treeHeight - X - 1)] // 根据父节点计算出子节点坐标\r\n                    prent.leftArrowOffSet = left.offSet // 左像箭头坐标\r\n                    left.leftArrowOffSet = null\r\n                    left.rightArrowOffSet = null\r\n                    e.push(left)\r\n                }\r\n                if ((right = prent.right)) {\r\n                    right.offSet = [X + 1, Y + Math.pow(2, treeHeight - X - 1)]\r\n                    prent.rightArrowOffSet = right.offSet // 右向箭头坐标\r\n                    right.leftArrowOffSet = null\r\n                    right.rightArrowOffSet = null\r\n                    e.push(right)\r\n                }\r\n            }\r\n            let copy = [...sequences] // 此处要做拷贝，直接push是引用\r\n            result.push(copy)\r\n            sequences = e;\r\n            e = []\r\n        }\r\n        return result;\r\n    }\r\n\r\n    deleteEntry = (p) => {\r\n        this.size--;\r\n        // If strictly internal, copy successor's element to p and then make p\r\n        // point to successor.\r\n        if (p.left != null && p.right != null) {\r\n            let s = this.successor(p);\r\n            p.key = s.key;\r\n            p.value = s.value;\r\n            p = s;\r\n        } // p has 2 children\r\n\r\n// Start fixup at replacement node, if it exists.\r\n        let replacement = (p.left != null ? p.left : p.right);\r\n\r\n        if (replacement != null) {\r\n            // Link replacement to parent\r\n            replacement.parent = p.parent;\r\n            if (p.parent == null)\r\n                this.root = replacement;\r\n            else if (p === p.parent.left)\r\n                p.parent.left = replacement;\r\n            else\r\n                p.parent.right = replacement;\r\n            // Null out links so they are OK to use by fixAfterDeletion.\r\n            p.left = p.right = p.parent = null;\r\n            // Fix replacement\r\n            if (p.color === BLACK)\r\n                this.fixAfterDeletion(replacement);\r\n        } else if (p.parent == null) { // return if we are the only node.\r\n            this.root = null;\r\n        } else { //  No children. Use self as phantom replacement and unlink.\r\n            if (p.color === BLACK)\r\n                this.fixAfterDeletion(p);\r\n            if (p.parent != null) {\r\n                if (p === p.parent.left)\r\n                    p.parent.left = null;\r\n                else if (p === p.parent.right)\r\n                    p.parent.right = null;\r\n                p.parent = null;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fixAfterDeletion = (x) => {\r\n        while (x !== this.root && this.colorOf(x) === BLACK) {\r\n            if (x === this.leftOf(this.parentOf(x))) {\r\n                let sib = this.rightOf(this.parentOf(x));\r\n\r\n                if (this.colorOf(sib) === RED) {\r\n                    this.setColor(sib, BLACK);\r\n                    this.setColor(this.parentOf(x), RED);\r\n                    this.rotateLeft(this.parentOf(x));\r\n                    sib = this.rightOf(this.parentOf(x));\r\n                }\r\n\r\n                if (this.colorOf(this.leftOf(sib)) === BLACK &&\r\n                    this.colorOf(this.rightOf(sib)) === BLACK) {\r\n                    this.setColor(sib, RED);\r\n                    x = this.parentOf(x);\r\n                } else {\r\n                    if (this.colorOf(this.rightOf(sib)) === BLACK) {\r\n                        this.setColor(this.leftOf(sib), BLACK);\r\n                        this.setColor(sib, RED);\r\n                        this.rotateRight(sib);\r\n                        sib = this.rightOf(this.parentOf(x));\r\n                    }\r\n                    this.setColor(sib, this.colorOf(this.parentOf(x)));\r\n                    this.setColor(this.parentOf(x), BLACK);\r\n                    this.setColor(this.rightOf(sib), BLACK);\r\n                    this.rotateLeft(this.parentOf(x));\r\n                    x = this.root;\r\n                }\r\n            } else { // symmetric\r\n                let sib = this.leftOf(this.parentOf(x));\r\n\r\n                if (this.colorOf(sib) === RED) {\r\n                    this.setColor(sib, BLACK);\r\n                    this.setColor(this.parentOf(x), RED);\r\n                    this.rotateRight(this.parentOf(x));\r\n                    sib = this.leftOf(this.parentOf(x));\r\n                }\r\n\r\n                if (this.colorOf(this.rightOf(sib)) === BLACK &&\r\n                    this.colorOf(this.leftOf(sib)) === BLACK) {\r\n                    this.setColor(sib, RED);\r\n                    x = this.parentOf(x);\r\n                } else {\r\n                    if (this.colorOf(this.leftOf(sib)) === BLACK) {\r\n                        this.setColor(this.rightOf(sib), BLACK);\r\n                        this.setColor(sib, RED);\r\n                        this.rotateLeft(sib);\r\n                        sib = this.leftOf(this.parentOf(x));\r\n                    }\r\n                    this.setColor(sib, this.colorOf(this.parentOf(x)));\r\n                    this.setColor(this.parentOf(x), BLACK);\r\n                    this.setColor(this.leftOf(sib), BLACK);\r\n                    this.rotateRight(this.parentOf(x));\r\n                    x = this.root;\r\n                }\r\n            }\r\n        }\r\n        this.setColor(x, BLACK);\r\n    }\r\n\r\n    successor = (t) => {\r\n        if (t == null)\r\n            return null;\r\n        else if (t.right != null) {\r\n            let p = t.right;\r\n            while (p.left != null)\r\n                p = p.left;\r\n            return p;\r\n        } else {\r\n            let p = t.parent;\r\n            let ch = t;\r\n            while (p != null && ch === p.right) {\r\n                ch = p;\r\n                p = p.parent;\r\n            }\r\n            return p;\r\n        }\r\n    }\r\n\r\n\r\n    remove = (key) => {\r\n        let p = this.getEntry(key);\r\n        if (p == null) {\r\n            return null;\r\n        }\r\n        let oldValue = p.value;\r\n        this.deleteEntry(p);\r\n        return oldValue;\r\n    }\r\n\r\n    getEntry = (key) => {\r\n        // Offload comparator-based version for sake of performance\r\n        if (key == null) {\r\n            return null;\r\n        }\r\n        let k = key;\r\n        let p = this.root;\r\n        while (p != null) {\r\n            let cmp = k - (p.key);\r\n            if (cmp < 0) {\r\n                p = p.left;\r\n            } else if (cmp > 0) {\r\n                p = p.right;\r\n            } else {\r\n                return p;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n","// import {Treemap} from \"../treemap/TreeMap\";\r\n\r\n\r\nimport Treemap from \"../treemap/TreeMap\";\r\n\r\nconst DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16\r\n\r\n/**\r\n * The maximum capacity, used if a higher value is implicitly specified\r\n * by either of the constructors with arguments.\r\n * MUST be a power of two <= 1<<30.\r\n */\r\nconst MAXIMUM_CAPACITY = 1 << 5;\r\n\r\n/**\r\n * The load factor used when none specified in constructor.\r\n */\r\nconst DEFAULT_LOAD_FACTOR = 0.75;\r\n\r\n/**\r\n * The bin count threshold for using a tree rather than list for a\r\n * bin.  Bins are converted to trees when adding an element to a\r\n * bin with at least this many nodes. The value must be greater\r\n * than 2 and should be at least 8 to mesh with assumptions in\r\n * tree removal about conversion back to plain bins upon\r\n * shrinkage.\r\n */\r\nconst TREEIFY_THRESHOLD = 8;\r\n\r\n/**\r\n * The bin count threshold for untreeifying a (split) bin during a\r\n * resize operation. Should be less than TREEIFY_THRESHOLD, and at\r\n * most 6 to mesh with shrinkage detection under removal.\r\n */\r\nconst UNTREEIFY_THRESHOLD = 6;\r\n\r\n/**\r\n * The smallest table capacity for which bins may be treeified.\r\n * (Otherwise the table is resized if too many nodes in a bin.)\r\n * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts\r\n * between resizing and treeification thresholds.\r\n */\r\nconst MIN_TREEIFY_CAPACITY = 64;\r\n\r\n/**\r\n * Basic hash bin node, used for most entries.  (See below for\r\n * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)\r\n */\r\nclass Node {\r\n    hash;\r\n    key;\r\n    value;\r\n    next;\r\n\r\n    constructor(hash, key, value, next) {\r\n        this.hash = hash;\r\n        this.key = key;\r\n        this.value = value;\r\n        this.next = next\r\n    }\r\n}\r\n\r\n\r\n\r\n// 此处只支持数字\r\nfunction hash(key) {\r\n    let h;\r\n    return (key == null) ? 0 : (h = key) ^ (h >>> 16);\r\n}\r\n\r\n\r\n/**\r\n * Returns a power of two size for the given target capacity.\r\n */\r\nfunction tableSizeFor(cap) {\r\n    let n = cap - 1;\r\n    n |= n >>> 1;\r\n    n |= n >>> 2;\r\n    n |= n >>> 4;\r\n    n |= n >>> 8;\r\n    n |= n >>> 16;\r\n    return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\r\n}\r\n\r\n\r\nexport class HashMap {\r\n\r\n    table;\r\n\r\n    /**\r\n     * Holds cached entrySet(). Note that AbstractMap fields are used\r\n     * for keySet() and values().\r\n     */\r\n    entrySet;\r\n\r\n    /**\r\n     * The number of key-value mappings contained in this map.\r\n     */\r\n    size;\r\n\r\n    /**\r\n     * The number of times this HashMap has been structurally modified\r\n     * Structural modifications are those that change the number of mappings in\r\n     * the HashMap or otherwise modify its internal structure (e.g.,\r\n     * rehash).  This field is used to make iterators on Collection-views of\r\n     * the HashMap fail-fast.  (See ConcurrentModificationException).\r\n     */\r\n    modCount;\r\n\r\n    /**\r\n     * The next size value at which to resize (capacity * load factor).\r\n     *\r\n     * @serial\r\n     */\r\n        // (The javadoc description is true upon serialization.\r\n        // Additionally, if the table array has not been allocated, this\r\n        // field holds the initial array capacity, or zero signifying\r\n        // DEFAULT_INITIAL_CAPACITY.)\r\n    threshold;\r\n\r\n    /**\r\n     * The load factor for the hash table.\r\n     *\r\n     * @serial\r\n     */\r\n    loadFactor;\r\n\r\n    constructor(loadFactor = DEFAULT_LOAD_FACTOR) {\r\n        this.loadFactor = loadFactor\r\n        this.modCount = 0;\r\n        this.size = 0;\r\n\r\n    }\r\n    /**\r\n     *  转成树。简单处理\r\n     */\r\n    treeifyBin(tab, hash) {\r\n        let p, n = tab.left, i;\r\n        p = tab[i = (n - 1) & hash]\r\n        let treemap = new Treemap();\r\n        while (p != null) {\r\n            treemap.put(p.key, p.value)\r\n            p = p.next;\r\n        }\r\n        tab[i] = treemap;\r\n    }\r\n\r\n\r\n    /**对树进行中序遍历*/\r\n    midEach(root){\r\n        if(!root){\r\n            return []\r\n        }\r\n        return this.midEach(root.left).concat([root]).concat(this.midEach(root.right))\r\n    }\r\n\r\n    /**这里用于 resize时 将树打散 重置于 newTab 中，此处的 newTab 一定要传引用，不然无法更新到类变量 table中*/\r\n    split(root,newTab,onlyIfAbsent=true){\r\n        let array = this.midEach(root);\r\n        for (const entry of array) {\r\n            let tab, p, n, i,hash = hash(entry.key),key=entry.key,value = entry.value;\r\n            if ((tab = newTab ) == null || (n = tab.length) === 0) {\r\n                n = (tab = this.resize()).length;\r\n            }\r\n            if ((p = tab[i = (n - 1) & hash]) == null){\r\n                tab[i] = this.newNode(hash, key, value, null);\r\n            }\r\n\r\n            else {\r\n                let e, k;\r\n                if (p.hash === hash && ((k = p.key) === key || (key != null && key.equals(k)))) {\r\n                    e = p;\r\n                } else if (p.constructor === Treemap)\r\n                    e = (p).put(key, value);\r\n                else {\r\n                    for (let binCount = 0; ; ++binCount) {\r\n                        if ((e = p.next) == null) {\r\n                            p.next = this.newNode(hash, key, value, null);\r\n\r\n                            /** 此处转成红黑树，直接复用 treemap代码 **/\r\n                            if (binCount >= TREEIFY_THRESHOLD - 1) {\r\n                                debugger;\r\n                                this.treeifyBin(tab, hash);\r\n                            } // -1 for 1st\r\n                            break;\r\n                        }\r\n                        if (e.hash === hash &&\r\n                            ((k = e.key) === key || (key != null && key.equals(k))))\r\n                            break;\r\n                        p = e;\r\n                    }\r\n                }\r\n                if (e != null) { // existing mapping for key\r\n                    let oldValue = e.value;\r\n                    if (!onlyIfAbsent || oldValue == null)\r\n                        e.value = value;\r\n\r\n                    return oldValue;\r\n                }\r\n            }\r\n            ++this.modCount;\r\n            if (++this.size > this.threshold)\r\n                this.resize();\r\n            return null;\r\n        }\r\n    }\r\n\r\n    get(key) {\r\n        let e;\r\n        return (e = this.getNode(hash(key), key)) == null ? null : e.value;\r\n    }\r\n\r\n    /**\r\n     * Implements Map.get and related methods\r\n     *\r\n     * @param hash hash for key\r\n     * @param key the key\r\n     * @return the node, or null if none\r\n     */\r\n    getNode(hash, key) {\r\n        let tab;\r\n        let first, e;\r\n        let n;\r\n        let k;\r\n        if ((tab = this.table) != null && (n = tab.length) > 0 &&\r\n            (first = tab[(n - 1) & hash]) != null) {\r\n            if (first.hash === hash && // always check first node\r\n                ((k = first.key) === key || (key != null && key.equals(k))))\r\n                return first;\r\n            if ((e = first.next) != null) {\r\n                if (first instanceof Treemap)\r\n                    return first.get(key);\r\n                do {\r\n                    if (e.hash === hash &&\r\n                        ((k = e.key) === key || (key != null && key.equals(k))))\r\n                        return e;\r\n                } while ((e = e.next) != null);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    put(key, value) {\r\n        return this.putVal(hash(key), key, value, false, true);\r\n    }\r\n\r\n    putVal(hash, key, value, onlyIfAbsent, evict) {\r\n        let tab, p, n, i;\r\n        if ((tab = this.table) == null || (n = tab.length) === 0) {\r\n            n = (tab = this.resize()).length;\r\n        }\r\n\r\n        if ((p = tab[i = (n - 1) & hash]) == null)\r\n            tab[i] = this.newNode(hash, key, value, null);\r\n        else {\r\n            let e, k;\r\n            if (p.hash === hash && ((k = p.key) === key || (key != null && key.equals(k)))) {\r\n                e = p;\r\n            } else if (p.constructor === Treemap)\r\n                e = (p).put(key, value);\r\n            else {\r\n                for (let binCount = 0; ; ++binCount) {\r\n                    if ((e = p.next) == null) {\r\n                        p.next = this.newNode(hash, key, value, null);\r\n\r\n                        /** 此处转成红黑树，直接复用 treemap代码 **/\r\n                        if (binCount >= TREEIFY_THRESHOLD - 1) {\r\n                            debugger;\r\n                            this.treeifyBin(tab, hash);\r\n                        } // -1 for 1st\r\n                        break;\r\n                    }\r\n                    if (e.hash === hash &&\r\n                        ((k = e.key) === key || (key != null && key.equals(k))))\r\n                        break;\r\n                    p = e;\r\n                }\r\n            }\r\n            if (e != null) { // existing mapping for key\r\n                let oldValue = e.value;\r\n                if (!onlyIfAbsent || oldValue == null)\r\n                    e.value = value;\r\n\r\n                return oldValue;\r\n            }\r\n        }\r\n        ++this.modCount;\r\n        if (++this.size > this.threshold)\r\n            this.resize();\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 模拟扩容。考虑到页面排版，最大支持table长度32\r\n     * @returns {any[]|*}\r\n     */\r\n\r\n    resize() {\r\n        let oldTab = this.table;\r\n        let oldCap = (oldTab == null) ? 0 : oldTab.length;\r\n        let oldThr = this.threshold;\r\n        let newCap, newThr = 0;\r\n        if (oldCap > 0) {\r\n            // 最大支持到32\r\n            if (oldCap >= MAXIMUM_CAPACITY) {\r\n                this.threshold = MAXIMUM_CAPACITY;\r\n                return oldTab;\r\n                // 如果不到32 就翻一倍\r\n            } else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&   oldCap >= DEFAULT_INITIAL_CAPACITY){\r\n                newThr = oldThr << 1; // 翻一倍\r\n            }\r\n        } else if (oldThr > 0) {\r\n            newCap = oldThr;\r\n        }\r\n        else {               // zero initial threshold signifies using defaults\r\n            newCap = DEFAULT_INITIAL_CAPACITY;\r\n            newThr = DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY;\r\n        }\r\n        if (newThr === 0) {\r\n            let ft = newCap * this.loadFactor;\r\n            newThr = (newCap < MAXIMUM_CAPACITY && ft < MAXIMUM_CAPACITY ? ft : 1 << 31);\r\n        }\r\n\r\n        this.threshold = newThr;\r\n        let newTab = new Array(newCap);\r\n        this.table = newTab;\r\n        // 处理旧元素\r\n        if (oldTab != null) {\r\n            for (let j = 0; j < oldCap; ++j) {\r\n                let e;\r\n                if ((e = oldTab[j]) != null) {\r\n                    oldTab[j] = null;\r\n                    /** 啥也不是*/\r\n                    if (e.next == null)\r\n                        newTab[e.hash & (newCap - 1)] = e;\r\n                    /**红黑树*/\r\n                    else if (e instanceof Treemap){\r\n                        /** 这里做一个简单处理，把红黑树做中序遍历拿到的数组直接set到newTab中*/\r\n                        // (e).split(newTab, j, oldCap);\r\n                        this.split(e,newTab)\r\n                    }\r\n                    /**链表*/\r\n                    else { // preserve order\r\n                        let loHead = null, loTail = null;\r\n                        let hiHead = null, hiTail = null;\r\n                        let next;\r\n                        do{\r\n                            /** 这里做了优化，，如果 e.hash & oldCap ==0\r\n                             * 说明 e.hash = x000000\r\n                             * 在newTab中，要么在0 要么在1 同理，整个链表也在这两个位置\r\n                             * * */\r\n                            next = e.next;\r\n                            if ((e.hash & oldCap) === 0) {\r\n                                if (loTail == null){\r\n                                    loHead = e;\r\n                                }\r\n                                else{\r\n                                    loTail.next = e;\r\n                                }\r\n                                loTail = e;\r\n                            } else {\r\n                                if (hiTail == null)\r\n                                    hiHead = e;\r\n                                else\r\n                                    hiTail.next = e;\r\n                                hiTail = e;\r\n                            }\r\n                        } while ((e = next) != null);\r\n                        if (loTail != null) {\r\n                            loTail.next = null;\r\n                            newTab[j] = loHead;\r\n                        }\r\n                        if (hiTail != null) {\r\n                            hiTail.next = null;\r\n                            newTab[j + oldCap] = hiHead;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return newTab;\r\n    }\r\n\r\n\r\n    newNode(hash, key, value, next) {\r\n        return new Node(hash, key, value, next);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nlet hashMap = new HashMap();\r\ndebugger\r\nconsole.log(12313111)\r\nhashMap.put(45)\r\nhashMap.put(48)\r\nhashMap.put(112)\r\nhashMap.put(240)\r\nhashMap.put(496)\r\nhashMap.put(1008)\r\nhashMap.put(2032)\r\nhashMap.put(4080)\r\nhashMap.put(8176)\r\nhashMap.put(16368)\r\n","import React from \"react\";\r\nimport ProForm, {\r\n    ProFormText, ProFormSelect,\r\n} from \"@ant-design/pro-form\";\r\nimport {EditableProTable} from '@ant-design/pro-table';\r\nimport {number} from \"prop-types\";\r\nimport {Form} from \"antd\";\r\nimport {Input} from \"antd\";\r\nimport {Button} from \"antd\";\r\nimport {companyChange} from \"../../api/company\";\r\nimport {message} from \"antd\";\r\nimport {companyQuery} from \"../../api/company\";\r\nimport {Space} from \"antd\";\r\nimport {Row} from \"antd\";\r\nimport {Col} from \"antd\";\r\nimport {Upload} from \"antd\";\r\nimport {uploadFile} from \"../../api/company\";\r\nimport {upload} from \"../../utils/request\";\r\nimport {deleteFile} from \"../../api/company\";\r\nimport {Tooltip} from \"antd\";\r\nimport {HashMap} from \"../hashmap/HashMap\";\r\n\r\n/*\r\n* proform 配置信息\r\n* */\r\nconst config = {\r\n\r\n    layout: \"vertical \",\r\n    scrollToFirstError: true,\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    validateMessages: {required: \"'${label}' 是必填字段\"},\r\n\r\n\r\n}\r\n\r\n\r\n/*\r\n* 后端模型\r\n* */\r\n\r\nconst Company = {\r\n    id: number,\r\n    companyName: String,\r\n    companyAddr: String,\r\n    companyPhone: String,\r\n    mark: String,\r\n    type: String,\r\n    updataTime: String,\r\n    insertTime: String,\r\n    delete: number,\r\n}\r\n\r\nconst formItemProps = {\r\n    rules: [\r\n        {\r\n            required: true,\r\n            message: '此项为必填项',\r\n        },\r\n    ],\r\n}\r\nconst columns = [\r\n    {\r\n        dataIndex: 'index',\r\n        valueType: 'indexBorder',\r\n        width: 48,\r\n    },\r\n    {\r\n        title: \"银行名称\",\r\n        dataIndex: \"backName\",\r\n        formItemProps: formItemProps\r\n    },\r\n    {\r\n        title: \"支行名称\",\r\n        dataIndex: \"branchBackName\",\r\n        formItemProps: formItemProps\r\n    },\r\n    {\r\n        title: \"收款户名\",\r\n        valueType: \"progress\",\r\n        dataIndex: \"cardName\",\r\n        formItemProps: formItemProps\r\n    },\r\n    {\r\n        title: \"账号\",\r\n        dataIndex: \"cardId\",\r\n        formItemProps: formItemProps\r\n    },\r\n    {\r\n        title: \"备注\",\r\n        dataIndex: \"mark\",\r\n    },\r\n    {\r\n        title: \"操作\",\r\n        valueType: 'option',\r\n        render: () => {\r\n            return null;\r\n        },\r\n    }\r\n\r\n]\r\nconst companyBackInfos = {\r\n    backName: String,\r\n    branchBackName: String,\r\n    cardName: String,\r\n    cardId: String,\r\n    mark: String,\r\n}\r\n\r\n\r\n/*\r\n* 请求模型\r\n* */\r\n// eslint-disable-next-line no-unused-vars\r\nconst companyVo = {\r\n    type: number,\r\n    companyid: number,\r\n    company: Company,\r\n    companyBackInfos\r\n}\r\n\r\nclass CompanyDetail extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            config: config,\r\n            res: {},\r\n            loading: false,\r\n            datasource: [],\r\n            type: 0, // 新建 1 更新\r\n            fileList:[],\r\n            upLoadDisable:false\r\n        }\r\n        this.hash = new HashMap();\r\n        console.log(props)\r\n        this.form = React.createRef()\r\n        this.table = React.createRef()\r\n    }\r\n\r\n    componentDidMount() {\r\n        const a = this.props.match.params.companyId\r\n        console.log(a)\r\n        if (a) {\r\n            this.setState({loading: true})\r\n            companyQuery({id: a.split(\"=\")[1]}).then(\r\n                (res) => {\r\n                    if (res.code === 0) {\r\n                        this.setState({\r\n                            res: res.data,\r\n                            loading: false,\r\n                            datasource: res.data.companyBackInfos,\r\n                        }, () => {\r\n                            let a = this.state.datasource;\r\n                            let editKey = []\r\n                            for (let i = 0; i < a.length; i++) {\r\n                                a[i].xid = i;\r\n                                editKey.push(i)\r\n                            }\r\n                            this.setState({editKey})  // 此处需要维护一个数组，内容为表格编辑的rowkey，因为后端不直接提供rowkey，需要自己处理\r\n                            this.setState({type: 1})\r\n                            this.form.current.setFieldsValue(this.state.res)  //一定要在这里设置。不能通过initvalue\r\n                            // 因为 initvalue只有在第一次加载生效，而setstate是异步的，拿不到数据，这里设置了，是全局的\r\n                        })\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Form\r\n                ref={this.form}\r\n                {...this.state.config}\r\n                onFinish={\r\n                    (values) => {\r\n                        console.log(values)\r\n                        values.type = this.state.type;\r\n\r\n                        if (values.companyBackInfos === undefined) {\r\n                            message.warning(\"至少提交一条银行卡数据\")\r\n                            return\r\n                        }\r\n                        debugger;\r\n                        values.company.fileList = JSON.stringify(this.state.fileList)\r\n                        companyChange(values).then(\r\n                            (e) => {\r\n                                if (e.code === 0) {\r\n                                    message.success(\"提交成功\")\r\n                                    window.location.pathname = \"/ts/companyDescriptions/companyId=\" + e.data\r\n                                }else {\r\n                                    message.error(e.msg)\r\n                                }\r\n                            }\r\n                        )\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            >\r\n                <ProFormText name={[\"company\", \"id\"]} hidden\r\n                />\r\n                <Row>\r\n                    <Col span={18}>\r\n                      <div style={{borderRight:\"solid 1px\"}}>\r\n                          <ProForm.Group>\r\n\r\n                              <ProFormText name={[\"company\", \"companyName\"]} label={\"公司名称\"} width={\"sm\"}\r\n                                           rules={[{required: true}]}/>\r\n\r\n                              <ProFormText name={[\"company\", \"companyAddr\"]}\r\n                                           label={\"公司地址\"}\r\n                                           width={\"xl\"}\r\n                                           rules={[{required: true}]}\r\n\r\n                              />\r\n\r\n                          </ProForm.Group>\r\n\r\n                          <ProForm.Group>\r\n                              <ProFormText name={[\"company\", \"companyPhone\"]} label={\"公司电话\"} width={\"xl\"}\r\n                                           rules={[{required: true}]}/>\r\n                              <ProFormSelect name={[\"company\", \"type\"]}\r\n                                             label={\"公司类型\"}\r\n                                             width={\"xl\"}\r\n                                             rules={[{required: true}]}\r\n                                             options={[{\r\n                                                 value: \"0\",\r\n                                                 label: \"内部\"\r\n                                             },\r\n                                                 {\r\n                                                     value: \"1\",\r\n                                                     label: \"外部\"\r\n                                                 }]}\r\n                              />\r\n                          </ProForm.Group>\r\n\r\n                          <Form.Item label={\"备注\"} name={[\"company\", \"mark\"]} wrapperCol={{span: 22, offset: 0}}>\r\n                              {/* wrapperCol  设置布局 span 列框 offset 起始列*/}\r\n                              <Input.TextArea\r\n                                  allowClear\r\n                                  autoSize={{minRows: 5, maxRows: 10}}\r\n                                  showCount={true}\r\n                                  maxLength={1000}\r\n                                  placeholder=\"请输入备注，最大长度1000字\"\r\n                              />\r\n                          </Form.Item>\r\n\r\n                      </div>\r\n\r\n                    </Col>\r\n\r\n                    <Col >\r\n                        <Upload\r\n                            beforeUpload={() =>false}\r\n                            disabled ={this.state.upLoadDisable}\r\n                            onChange={(e) => {\r\n                                if (this.state.fileList.filter((it)=>it.name ===e.file.name).length>0){\r\n                                    message.warn(e.file.name+\"已存在,不要重复上传\")\r\n                                    return\r\n                                }\r\n                                uploadFile(e.file).then((rsp)=>{\r\n                                    debugger;\r\n                                    if (rsp.code ===0){\r\n                                        this.setState((state)=>{\r\n                                                state.fileList.push({\"name\":e.file.name,\"url\": rsp.data})\r\n                                                return state;\r\n                                            }\r\n                                        )\r\n                                    }else {\r\n                                        debugger;\r\n                                        message.error(rsp.msg)\r\n                                    }\r\n                                })\r\n                            }}\r\n\r\n                            fileList={ this.state.fileList}\r\n\r\n                            // action={\"/fileSupport/upload\"}\r\n                            onRemove={(e) =>{\r\n                                deleteFile(e.originFileObj).then()\r\n                            }}\r\n                            multiple\r\n                            // accept={\".doc,.docx,.csv,.xsl,.xslx,.ptf,.jpg,.jpeg,.png\"}\r\n                        >\r\n                          <Tooltip title={\"此处只做展示用，后端不保存\"}>\r\n                              <Button > 上传</Button>\r\n                          </Tooltip>\r\n                        </Upload>\r\n\r\n                    </Col>\r\n\r\n                </Row>\r\n\r\n                <ProForm.Item label={\"银行信息\"}\r\n                              name={\"companyBackInfos\"}\r\n                              trigger=\"onValuesChange\"\r\n                >\r\n                    {/* trigger == \t设置收集字段值变更的时*/}\r\n                    <EditableProTable\r\n                        actionRef={this.table}\r\n                        bordered // 显示边框\r\n                        columns={columns} //列名，可以设置校验规则\r\n                        rowKey=\"xid\"\r\n                        maxLength={5} // 设置最大行数\r\n                        minLength={1}\r\n                        recordCreatorProps={{\r\n                            // 这里设置生成纪录的规则\r\n                            // 这里设置 dataSource 才能用下面defaultDoms 的参数\r\n                            newRecordType: 'dataSource',\r\n                            record: () => ({  // 生成行的下标，如果不设置，自动拿index，删除时会有bug\r\n                                xid: Date.now(),\r\n                            }),\r\n                        }}\r\n                        editable={{\r\n                            type: 'multiple',\r\n                            actionRender: (row, config, defaultDoms) => {\r\n                                return [defaultDoms.delete];\r\n                            },\r\n                            editableKeys: this.state.editKey,\r\n                            onChange: (editKey) => {\r\n                                this.setState({editKey})\r\n                            }\r\n                        }}\r\n\r\n                    />\r\n                </ProForm.Item>\r\n                <Form.Item>\r\n                    <Button type={\"primary\"} htmlType={\"submit\"} onClick={() => {\r\n                        console.log(\"ssss\", this.table)\r\n                    }}> 提交</Button>\r\n\r\n                </Form.Item>\r\n            </Form>\r\n\r\n\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default CompanyDetail;","import React from \"react\";\r\nimport {renderRoutes} from \"react-router-config\";\r\nimport ProLayout, {PageContainer} from '@ant-design/pro-layout';\r\nimport routes from \"../config/router\";\r\nimport {Image} from \"antd\";\r\nimport i from \"../static/images/2d33195cb865e7759fd71fe081c297f3.jpeg\"\r\n\r\n\r\nexport default class BasicLayout extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(this.props)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <ProLayout\r\n                // logo={()=><Image src={i}\r\n                //                  preview={false}\r\n                //     onClick={() =>{\r\n                //         window.location.pathname = '/'\r\n                //     }}\r\n                // />}\r\n                logo={false}\r\n                title={<p style={{fontSize: 25, color: \"white\"}}>模版页面</p>}\r\n                route={{routes}}\r\n                menuItemRender={(item, dom) => {\r\n                    if (item.path) {\r\n                        return <a href={item.path}>{item.icon}{dom}</a>\r\n                    }\r\n                }\r\n                }\r\n            >\r\n                <PageContainer\r\n\r\n                    content={renderRoutes(this.props.route.routes)}\r\n                >\r\n\r\n                </PageContainer>\r\n            </ProLayout>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/2d33195cb865e7759fd71fe081c297f3.fd73e8ea.jpeg\";","import React, {Component} from 'react';\r\n\r\nimport {Stage, Layer, Text} from 'react-konva';\r\n\r\nimport {Circle} from \"react-konva\";\r\nimport {Arrow} from \"react-konva\";\r\nimport {Button} from \"antd\";\r\n\r\nimport {Space} from \"antd\";\r\nimport {InputNumber} from \"antd\";\r\n\r\nimport {Tooltip} from \"antd\";\r\n\r\nimport {message} from \"antd\";\r\nimport Treemap from \"./TreeMap\";\r\n\r\n// 绘制圆形及文案\r\n// 文案为 矩形，左上角坐标为圆心坐标减去半斤，\r\n// 经试验  x向下偏移3px\r\n// y坐标上浮 5px 效果最佳\r\n/**\r\n * x 行 对应纵坐标  长度\r\n * y 列 对应横坐标长度\r\n * @param props\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction Circles(props) {\r\n    const {r, x, y, text, color} = props\r\n\r\n    const s = \"00000\"+Math.abs(text);\r\n\r\n    const s1 =  text>=0?s.substring(s.length-5,s.length):\"-\"+s.substring(s.length-4,s.length)\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Circle radius={r} x={y} y={x} fill={color}/>\r\n            <Text text={s1} x={y - r + 3} y={x - 5} fill={\"white\"}/>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n/**\r\n * 绘制箭头图像，根据两个圆的圆心坐标，计算出直线与圆交点处的坐标\r\n * 作为箭头的起始坐标\r\n * @param props\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction ArrowsRight(props) {\r\n\r\n    const {r, x, y, x1, y1} = props\r\n    let x2, y2, x3, y3; // 箭头指向下方球的坐标 根据相似三角形等比计算\r\n    if (x1) {\r\n        let b = (x1 - x) / (y1 - y)\r\n        let char = Math.sqrt(r * r / (b + 1))\r\n        x2 = y+char\r\n        y2 = x+b*char\r\n        x3 = y1-char\r\n        y3 = x1 - b*char\r\n    }\r\n    return (\r\n        <Arrow points={[x2, y2, x3, y3]} strokeWidth={1}\r\n               lineCap={\"round\"}\r\n               pointerLength={5}\r\n               pointerWidth={5}\r\n               fill={\"black\"} stroke={\"black\"}\r\n        />\r\n        )\r\n}\r\n\r\n\r\nfunction ArrowsLeft(props) {\r\n    debugger;\r\n    const {r, x, y, x1, y1} = props\r\n    let x2, y2, x3, y3; // 箭头指向下方球的坐标 根据相似三角形等比计算\r\n    if (x1) {\r\n        let b = (x1-x ) / (y - y1)\r\n        let char = Math.sqrt(r * r / (b + 1))\r\n        x2 = y-char\r\n        y2 = x+b*char\r\n        x3 = y1+char\r\n        y3 = x1 - b*char\r\n    }\r\n    return (\r\n        <Arrow points={[x2, y2, x3, y3]} strokeWidth={1}\r\n               lineCap={\"round\"}\r\n               pointerLength={5}\r\n               pointerWidth={5}\r\n               fill={\"black\"} stroke={\"black\"}\r\n        />\r\n    )\r\n}\r\n\r\n\r\n// 适配1500*900 屏幕 横向最大30*50 纵向17*50 半径固定20 横纵间距固定10\r\n\r\n\r\nexport default class RedBlack extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            r: 20,// 圆的半径\r\n            px: 50,\r\n            treeMap: new Treemap(),\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 只要key，value都是undefined\r\n     * 直接调用treemap中的put方法\r\n     * @param value\r\n     */\r\n    put = (value) => {\r\n        if (!value) {\r\n            message.warning(\"请输入数字\")\r\n            return\r\n        }\r\n        if (this.state.treeMap.get(value)){\r\n            message.warning(value+\"已存在\")\r\n            return\r\n        }\r\n        this.setState((state) =>{\r\n            state.treeMap.put(value);\r\n            return state;\r\n        } )\r\n    }\r\n\r\n    get = (key)=>{\r\n        if (!key) {\r\n            message.warning(\"请输入数字\")\r\n            return\r\n        }\r\n\r\n         this.state.treeMap.get(key)?message.success(\"存在key:\"+key) :message.error(\"不存在key:\"+key)\r\n    }\r\n\r\n    remove = (key)=>{\r\n        if (!key) {\r\n            message.warning(\"请输入数字\")\r\n            return\r\n        }\r\n        if (!this.state.treeMap.get(key)){\r\n            message.warning(key+\"不存在,请确认\")\r\n            return\r\n        }\r\n        this.setState((state)=>{\r\n            state.treeMap.remove(key)\r\n            return state\r\n        })\r\n}\r\n    /**\r\n     * 计算出需要渲染的dom数组\r\n     * @param treeHeight 树高固定5\r\n     */\r\n    dom = (treeHeight = 5)=>{\r\n        debugger\r\n        let sequences = this.state.treeMap.sequence(treeHeight); // 拿到层序遍历的二维数组\r\n        if (!sequences){return }\r\n        let doms = []\r\n        for (const sequence of sequences) {\r\n            for (const node of sequence) {\r\n\r\n                doms.push(<Circles key={doms.length} r={this.state.r}\r\n                                    x={node.offSet[0]*this.state.px}\r\n                                    y={node.offSet[1]*this.state.px}\r\n                                    text={node.key}\r\n                                    color={node.color?\"black\":\"red\"}\r\n                />)\r\n                node.leftArrowOffSet && doms.push(\r\n                    <ArrowsLeft\r\n                        key={doms.length}\r\n                        r={this.state.r}\r\n                        x={node.offSet[0]*this.state.px}\r\n                        y={node.offSet[1]*this.state.px}\r\n                        x1={node.leftArrowOffSet[0]*this.state.px}\r\n                        y1={node.leftArrowOffSet[1]*this.state.px}\r\n                    />\r\n                )\r\n\r\n                node.rightArrowOffSet && doms.push(\r\n                    <ArrowsRight\r\n                        key={doms.length}\r\n                        r={this.state.r}\r\n                        x={node.offSet[0]*this.state.px}\r\n                        y={node.offSet[1]*this.state.px}\r\n                        x1={node.rightArrowOffSet[0]*this.state.px}\r\n                        y1={node.rightArrowOffSet[1]*this.state.px}\r\n                    />\r\n                )\r\n            }\r\n\r\n        }\r\n        console.log(doms)\r\n        return doms\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Space>\r\n                    <InputNumber\r\n                        allowClear={true}\r\n                        max={99999} min={-9999} ref={this.insert = React.createRef()}\r\n                                 onPressEnter={\r\n                                     (e) => {\r\n                                         this.put(this.insert.current.value)\r\n                                     }\r\n                                 }\r\n                        onClick={() =>{\r\n                            this.insert.current.value = null\r\n                        }}\r\n\r\n                    />\r\n                    <Tooltip title={\"为了布局展示优美，输入长度不要超过5位,总节点不多于31\"}>\r\n                        <Button type={\"primary\"} onClick={() => this.put(this.insert.current.value)}> 添加</Button>\r\n                    </Tooltip>\r\n\r\n                    <InputNumber max={99999} min={-9999} ref={this.delete = React.createRef()}\r\n                                 onPressEnter={\r\n                                     (e) => this.remove( this.delete.current.value )\r\n                                 }\r\n                                 onClick={() =>{\r\n                                     this.delete.current.value = null\r\n                                 }}\r\n                    />\r\n                    <Button type={\"primary\"} onClick={() => this.remove(this.delete.current.value)}> 删除</Button>\r\n\r\n                    <InputNumber max={99999} min={-9999} ref={this.find = React.createRef()}\r\n\r\n                                 onPressEnter={\r\n                                     (e) => this.get(this.find.current.value)\r\n                                 }\r\n                                 onClick={() =>{\r\n                                     this.find.current.value = null\r\n                                 }}\r\n                    />\r\n                    <Button type={\"primary\"} onClick={() => this.get(this.find.current.value)}> 查找</Button>\r\n\r\n                </Space>\r\n\r\n                <div style={{height: \"100%\", width: \"100%\", border: \"solid 1px\"}}>\r\n\r\n                    <Stage width={1500} height={900}>\r\n                        <Layer draggable>\r\n                            {this.dom()}\r\n                        </Layer>\r\n                    </Stage>\r\n\r\n                </div>\r\n            </React.Fragment>\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n}","export default __webpack_public_path__ + \"static/media/1621575534283490.743ec3ab.png\";","import React from \"react\";\r\nimport {Image} from \"antd\";\r\nimport i from \"../static/images/1621575534283490.png\"\r\nimport BasicLayout from \"../layout/BasicLayout\";\r\n\r\n\r\n\r\nexport default class Welcome extends React.Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{width:\"100%\",height:\"95vh\"}}>\r\n\r\n                <Image\r\n                    width={\"100%\"}\r\n                    height={\"30em\"}\r\n                    src={i}\r\n                >\r\n                </Image>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","//at.alicdn.com/t/font_2528079_2dv65iy19w7.js\r\n\r\n\r\nimport {createFromIconfontCN} from \"@ant-design/icons\";\r\n\r\nconst FunctionComponent = createFromIconfontCN({\r\n    scriptUrl: '//at.alicdn.com/t/font_2528079_2dv65iy19w7.js'\r\n})\r\nexport default FunctionComponent;\r\n","import CompanyList from \"../component/company/CompanyList\";\r\nimport CompanyDescriptions from \"../component/company/CompanyDescriptions\";\r\nimport CompanyDetail from \"../component/company/CompanyDetail\";\r\nimport BasicLayout from \"../layout/BasicLayout\";\r\nimport {FormOutlined, SendOutlined, SolutionOutlined, RadarChartOutlined} from \"@ant-design/icons\"\r\nimport React from \"react\";\r\nimport RedBlackTree from \"../component/treemap/RedBlackTree\";\r\nimport Welcome from \"../component/Wellcom\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport FunctionComponent from \"../static/icon/Icon\";\r\nimport {ShareAltOutlined} from \"@ant-design/icons\";\r\nimport {LinkOutlined} from \"@ant-design/icons\";\r\nimport {RedditOutlined} from \"@ant-design/icons\";\r\n\r\n\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default [\r\n    {\r\n        path: \"/\",\r\n        name:\"欢迎\",\r\n        exact:true,\r\n        render:() => (\r\n            <Redirect to={\"/ts/welcome\"}/>\r\n        ),\r\n    },\r\n    {\r\n        path:\"/gs\",\r\n        component:BasicLayout,\r\n        name:\"算法可视化\",\r\n        icon: <ShareAltOutlined />,\r\n        routes: [\r\n            {\r\n                path:\"/gs/redBlackTree\",\r\n                component:RedBlackTree,\r\n                name:\"红黑树\",\r\n                icon: <RadarChartOutlined/>\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        path: \"/ts\",\r\n        component:BasicLayout,\r\n        name:\"三分钟快速搭建CURD\",\r\n        icon: <LinkOutlined />,\r\n        routes: [\r\n            {\r\n                path: '/ts/welcome',\r\n                component: Welcome,\r\n\r\n            },\r\n\r\n            {\r\n                path: '/ts/companyList',\r\n                name: \"列表页\",\r\n                icon: <FormOutlined/>,\r\n                component: CompanyList,\r\n            },\r\n            {\r\n                path: '/ts/companyDetail',\r\n                name: \"详情页\",\r\n                exact: true,\r\n                icon: <SendOutlined/>,\r\n                component: CompanyDetail,\r\n            },\r\n            {\r\n                path: '/ts/companyDetail/:companyId',\r\n                component: CompanyDetail,\r\n            },\r\n            {\r\n                path: '/ts/companyDescriptions/:companyId',\r\n                name: \"明细页\",\r\n                icon: <SolutionOutlined/>,\r\n                component: CompanyDescriptions,\r\n            },\r\n\r\n        ]\r\n    }\r\n\r\n\r\n]","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {renderRoutes} from \"react-router-config\";\r\nimport routes from \"./config/router\"\r\n\r\n\r\n\r\n\r\nfunction App(){\r\n    return (\r\n        <React.Fragment>\r\n            {/*store 作为 Provider 的属性*/}\r\n            <BrowserRouter>\r\n                {renderRoutes(routes)}\r\n            </BrowserRouter>\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nReactDOM.render(\r\n    < App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}